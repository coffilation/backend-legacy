{
	"info": {
		"_postman_id": "6e655f48-f93d-43f8-ae0d-bc312d10398d",
		"name": "coffilation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10561517"
	},
	"item": [
		{
			"name": "Create user",
			"item": [
				{
					"name": "Create user with wrong rePassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 400",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"reprehenderit magna dolore adipisicing in\",\n  \"password\": \"officia sit\",\n  \"rePassword\": \"veniam elit fugiat laborum\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with wrong username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 400",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"reprehenderit magna dolore adipisicing in\",\n  \"password\": \"officia sit\",\n  \"rePassword\": \"officia sit\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create first user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 201",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.id).to.be.a(`number`)",
									"    pm.expect(responseJson.username).to.eql(pm.collectionVariables.get(`firstUserUsername`))",
									"",
									"    pm.collectionVariables.set(`firstUserId`, responseJson.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{firstUserUsername}}\",\n  \"password\": \"officia sit\",\n  \"rePassword\": \"officia sit\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user with occupied username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 400",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{firstUserUsername}}\",\n  \"password\": \"officia sit\",\n  \"rePassword\": \"officia sit\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 201",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.id).to.be.a(`number`)",
									"    pm.expect(responseJson.username).to.be.a(`string`)",
									"",
									"    pm.collectionVariables.set(`secondUserId`, responseJson.id)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{secondUserUsername}}\",\n  \"password\": \"officia sit\",\n  \"rePassword\": \"officia sit\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Log in and refresh token",
			"item": [
				{
					"name": "First user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.access).to.be.a(`string`)",
									"    pm.expect(responseJson.refresh).to.be.a(`string`)",
									"",
									"    pm.collectionVariables.set(`firstUserAccessToken`, responseJson.access)",
									"    pm.collectionVariables.set(`firstUserRefreshToken`, responseJson.refresh)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{firstUserUsername}}\",\n  \"password\": \"officia sit\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"consectetur sed\",\n  \"password\": \"consequat in velit t\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"access\": \"ea\",\n  \"refresh\": \"veniam deserunt velit culpa\"\n}"
						}
					]
				},
				{
					"name": "First user login with wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 401",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{firstUserUsername}}\",\n  \"password\": \"officia sitt\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"consectetur sed\",\n  \"password\": \"consequat in velit t\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"access\": \"ea\",\n  \"refresh\": \"veniam deserunt velit culpa\"\n}"
						}
					]
				},
				{
					"name": "First user refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.access).to.be.a(`string`)",
									"    pm.expect(responseJson.refresh).to.be.a(`string`)",
									"",
									"    pm.collectionVariables.set(`firstUserAccessToken`, responseJson.access)",
									"    pm.collectionVariables.set(`firstUserRefreshToken`, responseJson.refresh)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh\": \"{{firstUserRefreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refresh\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"access\": \"ea\",\n  \"refresh\": \"veniam deserunt velit culpa\"\n}"
						}
					]
				},
				{
					"name": "Second user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.access).to.be.a(`string`)",
									"    pm.expect(responseJson.refresh).to.be.a(`string`)",
									"",
									"    pm.collectionVariables.set(`secondUserAccessToken`, responseJson.access)",
									"    pm.collectionVariables.set(`secondUserRefreshToken`, responseJson.refresh)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{secondUserUsername}}\",\n  \"password\": \"officia sit\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"consectetur sed\",\n  \"password\": \"consequat in velit t\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"access\": \"ea\",\n  \"refresh\": \"veniam deserunt velit culpa\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "User get and patch",
			"item": [
				{
					"name": "Users get me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.id).to.be.a(`number`)",
									"    pm.expect(responseJson.username).to.eql(pm.collectionVariables.get(`firstUserUsername`))",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 68044358.05190289,\n  \"username\": \"nisi\"\n}"
						}
					]
				},
				{
					"name": "Users get me 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 401",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "wrong token lol",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 68044358.05190289,\n  \"username\": \"nisi\"\n}"
						}
					]
				},
				{
					"name": "Users get id by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.id).to.eql(parseInt(pm.collectionVariables.get(`firstUserId`)))",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:username/id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":username",
								"id"
							],
							"variable": [
								{
									"key": "username",
									"value": "{{firstUserUsername}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 68044358.05190289,\n  \"username\": \"nisi\"\n}"
						}
					]
				},
				{
					"name": "Users get by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.id).to.be.a(`number`)",
									"    pm.expect(responseJson.username).to.eql(pm.collectionVariables.get(`firstUserUsername`))",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 68044358.05190289,\n  \"username\": \"nisi\"\n}"
						}
					]
				},
				{
					"name": "Users get by id 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 401",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "wrong token lol",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 68044358.05190289,\n  \"username\": \"nisi\"\n}"
						}
					]
				},
				{
					"name": "Patch username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.id).to.be.a(`number`)",
									"    pm.expect(responseJson.username).to.eql(pm.collectionVariables.get(`firstUserAlternativeUsername`))",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{firstUserAlternativeUsername}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"irure in consequat mollit\",\n  \"password\": \"reprehen\",\n  \"rePassword\": \"aliquip proident\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 68044358.05190289,\n  \"username\": \"nisi\"\n}"
						}
					]
				},
				{
					"name": "Patch username 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 401",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "wrong token lol",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{firstUserAlternativeUsername}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"irure in consequat mollit\",\n  \"password\": \"reprehen\",\n  \"rePassword\": \"aliquip proident\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 68044358.05190289,\n  \"username\": \"nisi\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Places",
			"item": [
				{
					"name": "Create place 400 (validation)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 400",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson.statusCode).to.eql(400)",
									"    pm.expect(responseJson.error).to.be.a(`string`)",
									"    responseJson.message.forEach((val) => pm.expect(val).to.be.a(`string`))",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"elit\",\n  \"latitude\": 55.755831,\n  \"longitude\": 37.617673,\n  \"osmType\": \"string\",\n  \"displayName\": \"string\",\n  \"category\": \"string\",\n  \"type\": \"string\",\n  \"address\": {\n    \"municipality\": \"string\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/places",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"places"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"elit\",\n  \"latitude\": 47410603.68473661,\n  \"longitude\": -90839607.4737693,\n  \"osmId\": -99821309.51597887\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/places",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"places"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 68730121.4424108,\n  \"name\": \"veniam ulla\",\n  \"latitude\": 78300726.41756153,\n  \"longitude\": -39981341.411437966,\n  \"osmId\": -97064123.97760223\n}"
						}
					]
				},
				{
					"name": "Create place",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 201",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson.name).to.eql(`elit`)",
									"    pm.expect(responseJson.latitude).to.eql(55.755831)",
									"    pm.expect(responseJson.longitude).to.eql(37.617673)",
									"    pm.expect(responseJson.osmId).to.eql(21474836478)",
									"    pm.expect(responseJson.osmType).to.eql(`string`)",
									"    pm.expect(responseJson.displayName).to.eql(`string`)",
									"    pm.expect(responseJson.category).to.eql(`string`)",
									"    pm.expect(responseJson.type).to.eql(`string`)",
									"    pm.expect(responseJson.address).to.deep.eq({ 'municipality': `string` })",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"elit\",\n  \"latitude\": 55.755831,\n  \"longitude\": 37.617673,\n  \"osmId\": 21474836478,\n  \"osmType\": \"string\",\n  \"displayName\": \"string\",\n  \"category\": \"string\",\n  \"type\": \"string\",\n  \"address\": {\n    \"municipality\": \"string\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/places",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"places"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"elit\",\n  \"latitude\": 47410603.68473661,\n  \"longitude\": -90839607.4737693,\n  \"osmId\": -99821309.51597887\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/places",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"places"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 68730121.4424108,\n  \"name\": \"veniam ulla\",\n  \"latitude\": 78300726.41756153,\n  \"longitude\": -39981341.411437966,\n  \"osmId\": -97064123.97760223\n}"
						}
					]
				},
				{
					"name": "Create place 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 401",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "wrong token lol",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"elit\",\n  \"latitude\": 55.755831,\n  \"longitude\": 37.617673,\n  \"osmId\": 21474836478,\n  \"osmType\": \"string\",\n  \"displayName\": \"string\",\n  \"category\": \"string\",\n  \"type\": \"string\",\n  \"address\": {\n    \"municipality\": \"string\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/places",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"places"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"elit\",\n  \"latitude\": 47410603.68473661,\n  \"longitude\": -90839607.4737693,\n  \"osmId\": -99821309.51597887\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/places",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"places"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 68730121.4424108,\n  \"name\": \"veniam ulla\",\n  \"latitude\": 78300726.41756153,\n  \"longitude\": -39981341.411437966,\n  \"osmId\": -97064123.97760223\n}"
						}
					]
				},
				{
					"name": "Create place 400 (typeorm)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 400",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson.error).to.be.a(`string`)",
									"    pm.expect(responseJson.statusCode).to.eql(400)",
									"    pm.expect(responseJson.message).to.be.a(`string`)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"elit\",\n  \"latitude\": 55.755831,\n  \"longitude\": 37.617673,\n  \"osmId\": 21474836478,\n  \"osmType\": \"string\",\n  \"displayName\": \"string\",\n  \"category\": \"string\",\n  \"type\": \"string\",\n  \"address\": {\n    \"municipality\": \"string\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/places",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"places"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"elit\",\n  \"latitude\": 47410603.68473661,\n  \"longitude\": -90839607.4737693,\n  \"osmId\": -99821309.51597887\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/places",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"places"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 68730121.4424108,\n  \"name\": \"veniam ulla\",\n  \"latitude\": 78300726.41756153,\n  \"longitude\": -39981341.411437966,\n  \"osmId\": -97064123.97760223\n}"
						}
					]
				},
				{
					"name": "Get place",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson.name).to.eql(`elit`)",
									"    pm.expect(responseJson.latitude).to.eql(55.755831)",
									"    pm.expect(responseJson.longitude).to.eql(37.617673)",
									"    pm.expect(responseJson.osmId).to.eql(21474836478)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/places/:osmId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"places",
								":osmId"
							],
							"variable": [
								{
									"key": "osmId",
									"value": "21474836478",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/places/:osmId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"places",
										":osmId"
									],
									"variable": [
										{
											"key": "osmId",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 68730121.4424108,\n  \"name\": \"veniam ulla\",\n  \"latitude\": 78300726.41756153,\n  \"longitude\": -39981341.411437966,\n  \"osmId\": -97064123.97760223\n}"
						}
					]
				},
				{
					"name": "Get empty places array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all entities`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson).to.deep.eql([])",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/places?userId={{firstUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"places"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{firstUserId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/places",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"places"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -13558060.678136468,\n    \"name\": \"exercitation et\",\n    \"latitude\": -68988683.05092804,\n    \"longitude\": -28907044.189646497,\n    \"osmId\": -58722197.89098452\n  },\n  {\n    \"id\": 13633918.582254842,\n    \"name\": \"ut\",\n    \"latitude\": 77386310.69151562,\n    \"longitude\": 88991580.73299018,\n    \"osmId\": -65787863.18853562\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "Collections",
			"item": [
				{
					"name": "Create first user private collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 201",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson.id).to.be.a(`number`)",
									"    pm.expect(responseJson.name).to.eql(`ut incididunt proident sint dolor`)",
									"    pm.expect(responseJson.description).to.eql(`descrasdiption`)",
									"",
									"    pm.collectionVariables.set(`firstUserCollectionId`, responseJson.id)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{firstUserAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"ut incididunt proident sint dolor\",\n  \"description\": \"descrasdiption\", \n  \"type\": \"PRIVATE\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"nulla deserunt\",\n  \"places\": [\n    -98429195.7638054,\n    25883008.680972576\n  ],\n  \"type\": \"PRIVATE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 14967045.538535252,\n  \"name\": \"Ut enim in\",\n  \"places\": [\n    {\n      \"id\": -42731088.481767945,\n      \"name\": \"dolore voluptate\",\n      \"latitude\": 63037862.50830385,\n      \"longitude\": -58464356.09797776,\n      \"osmId\": 79035798.47840488\n    },\n    {\n      \"id\": 81864534.7079503,\n      \"name\": \"nulla ipsum tempor dolor\",\n      \"latitude\": -84079778.59933133,\n      \"longitude\": 7904363.308799535,\n      \"osmId\": -84124079.90486264\n    }\n  ],\n  \"author\": {\n    \"id\": 1039967.4007899314,\n    \"username\": \"id ad velit irure\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "Create first user private collection 400 (validation)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 400",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson.statusCode).to.eql(400)",
									"    pm.expect(responseJson.error).to.be.a(`string`)",
									"    responseJson.message.forEach((val) => pm.expect(val).to.be.a(`string`))",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"descrasdiption\", \n  \"type\": \"PRIVATE\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"nulla deserunt\",\n  \"places\": [\n    -98429195.7638054,\n    25883008.680972576\n  ],\n  \"type\": \"PRIVATE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 14967045.538535252,\n  \"name\": \"Ut enim in\",\n  \"places\": [\n    {\n      \"id\": -42731088.481767945,\n      \"name\": \"dolore voluptate\",\n      \"latitude\": 63037862.50830385,\n      \"longitude\": -58464356.09797776,\n      \"osmId\": 79035798.47840488\n    },\n    {\n      \"id\": 81864534.7079503,\n      \"name\": \"nulla ipsum tempor dolor\",\n      \"latitude\": -84079778.59933133,\n      \"longitude\": 7904363.308799535,\n      \"osmId\": -84124079.90486264\n    }\n  ],\n  \"author\": {\n    \"id\": 1039967.4007899314,\n    \"username\": \"id ad velit irure\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "Create first user private collection 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 401",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "wrong token lol",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"ut incididunt proident sint dolor\",\n  \"description\": \"descrasdiption\", \n  \"type\": \"PRIVATE\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections"
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"nulla deserunt\",\n  \"places\": [\n    -98429195.7638054,\n    25883008.680972576\n  ],\n  \"type\": \"PRIVATE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 14967045.538535252,\n  \"name\": \"Ut enim in\",\n  \"places\": [\n    {\n      \"id\": -42731088.481767945,\n      \"name\": \"dolore voluptate\",\n      \"latitude\": 63037862.50830385,\n      \"longitude\": -58464356.09797776,\n      \"osmId\": 79035798.47840488\n    },\n    {\n      \"id\": 81864534.7079503,\n      \"name\": \"nulla ipsum tempor dolor\",\n      \"latitude\": -84079778.59933133,\n      \"longitude\": 7904363.308799535,\n      \"osmId\": -84124079.90486264\n    }\n  ],\n  \"author\": {\n    \"id\": 1039967.4007899314,\n    \"username\": \"id ad velit irure\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "Get all first user collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.length).to.eql(1)",
									"",
									"    const collection = responseJson[0]",
									"    pm.expect(collection.name).to.eql(`ut incididunt proident sint dolor`)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections?userId={{firstUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{firstUserId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/collections?authorId=48130610.91406965",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "authorId",
											"value": "48130610.91406965"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 23689236.19166851,\n    \"name\": \"ex occaecat labore\",\n    \"places\": [\n      {\n        \"id\": -12225927.00577496,\n        \"name\": \"aliquip est\",\n        \"latitude\": 21315662.20110002,\n        \"longitude\": -5164765.589526609,\n        \"osmId\": 14494621.861543372\n      },\n      {\n        \"id\": -89564360.33660764,\n        \"name\": \"labore dolore\",\n        \"latitude\": -10273743.28915985,\n        \"longitude\": -74714266.85368083,\n        \"osmId\": -25682777.943703398\n      }\n    ],\n    \"author\": {\n      \"id\": 5298961.443420276,\n      \"username\": \"dolore Ut\"\n    },\n    \"type\": \"PUBLIC\"\n  },\n  {\n    \"id\": 47854977.0970003,\n    \"name\": \"laboris sed anim enim Lorem\",\n    \"places\": [\n      {\n        \"id\": -32610094.03794475,\n        \"name\": \"ut in\",\n        \"latitude\": -67327435.8794854,\n        \"longitude\": -53540578.3315225,\n        \"osmId\": 74977094.04109555\n      },\n      {\n        \"id\": 20411821.982416794,\n        \"name\": \"Ut dolore ullamco\",\n        \"latitude\": -51186368.80628102,\n        \"longitude\": -88694282.22650471,\n        \"osmId\": -8606202.458495378\n      }\n    ],\n    \"author\": {\n      \"id\": 19533988.810225144,\n      \"username\": \"dolore culpa laborum\"\n    },\n    \"type\": \"PUBLIC\"\n  }\n]"
						}
					]
				},
				{
					"name": "Find created collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson.name).to.eql(`ut incididunt proident sint dolor`)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserCollectionId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 536868.3659441322,\n  \"name\": \"occaecat exercita\",\n  \"places\": [\n    {\n      \"id\": 38152948.55456507,\n      \"name\": \"in eiusmod sunt\",\n      \"latitude\": -67052106.38382106,\n      \"longitude\": -26170714.30845073,\n      \"osmId\": 59024866.93135142\n    },\n    {\n      \"id\": -61294810.204828165,\n      \"name\": \"ut sunt do\",\n      \"latitude\": -37358843.968296275,\n      \"longitude\": 14486252.573158786,\n      \"osmId\": -75295628.45866336\n    }\n  ],\n  \"author\": {\n    \"id\": 99579330.37630418,\n    \"username\": \"et laborum ad\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "List all collections via second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson.length).to.eql(0)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{secondUserAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections?userId={{secondUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{secondUserId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/collections?authorId=48130610.91406965",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "authorId",
											"value": "48130610.91406965"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 23689236.19166851,\n    \"name\": \"ex occaecat labore\",\n    \"places\": [\n      {\n        \"id\": -12225927.00577496,\n        \"name\": \"aliquip est\",\n        \"latitude\": 21315662.20110002,\n        \"longitude\": -5164765.589526609,\n        \"osmId\": 14494621.861543372\n      },\n      {\n        \"id\": -89564360.33660764,\n        \"name\": \"labore dolore\",\n        \"latitude\": -10273743.28915985,\n        \"longitude\": -74714266.85368083,\n        \"osmId\": -25682777.943703398\n      }\n    ],\n    \"author\": {\n      \"id\": 5298961.443420276,\n      \"username\": \"dolore Ut\"\n    },\n    \"type\": \"PUBLIC\"\n  },\n  {\n    \"id\": 47854977.0970003,\n    \"name\": \"laboris sed anim enim Lorem\",\n    \"places\": [\n      {\n        \"id\": -32610094.03794475,\n        \"name\": \"ut in\",\n        \"latitude\": -67327435.8794854,\n        \"longitude\": -53540578.3315225,\n        \"osmId\": 74977094.04109555\n      },\n      {\n        \"id\": 20411821.982416794,\n        \"name\": \"Ut dolore ullamco\",\n        \"latitude\": -51186368.80628102,\n        \"longitude\": -88694282.22650471,\n        \"osmId\": -8606202.458495378\n      }\n    ],\n    \"author\": {\n      \"id\": 19533988.810225144,\n      \"username\": \"dolore culpa laborum\"\n    },\n    \"type\": \"PUBLIC\"\n  }\n]"
						}
					]
				},
				{
					"name": "Try to find collection via second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 404",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{secondUserAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserCollectionId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 536868.3659441322,\n  \"name\": \"occaecat exercita\",\n  \"places\": [\n    {\n      \"id\": 38152948.55456507,\n      \"name\": \"in eiusmod sunt\",\n      \"latitude\": -67052106.38382106,\n      \"longitude\": -26170714.30845073,\n      \"osmId\": 59024866.93135142\n    },\n    {\n      \"id\": -61294810.204828165,\n      \"name\": \"ut sunt do\",\n      \"latitude\": -37358843.968296275,\n      \"longitude\": 14486252.573158786,\n      \"osmId\": -75295628.45866336\n    }\n  ],\n  \"author\": {\n    \"id\": 99579330.37630418,\n    \"username\": \"et laborum ad\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "Make collection public",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson.name).to.eql(`asada`)",
									"    pm.expect(responseJson.description).to.eql(`descrasdiption`)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"asada\",\n  \"type\": \"PUBLIC\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserCollectionId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"commodo officia aliquip\",\n  \"type\": \"PUBLIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 536868.3659441322,\n  \"name\": \"occaecat exercita\",\n  \"places\": [\n    {\n      \"id\": 38152948.55456507,\n      \"name\": \"in eiusmod sunt\",\n      \"latitude\": -67052106.38382106,\n      \"longitude\": -26170714.30845073,\n      \"osmId\": 59024866.93135142\n    },\n    {\n      \"id\": -61294810.204828165,\n      \"name\": \"ut sunt do\",\n      \"latitude\": -37358843.968296275,\n      \"longitude\": 14486252.573158786,\n      \"osmId\": -75295628.45866336\n    }\n  ],\n  \"author\": {\n    \"id\": 99579330.37630418,\n    \"username\": \"et laborum ad\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "Make collection public 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 401",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "wrong token lol",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"asada\",\n  \"type\": \"PUBLIC\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserCollectionId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"commodo officia aliquip\",\n  \"type\": \"PUBLIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 536868.3659441322,\n  \"name\": \"occaecat exercita\",\n  \"places\": [\n    {\n      \"id\": 38152948.55456507,\n      \"name\": \"in eiusmod sunt\",\n      \"latitude\": -67052106.38382106,\n      \"longitude\": -26170714.30845073,\n      \"osmId\": 59024866.93135142\n    },\n    {\n      \"id\": -61294810.204828165,\n      \"name\": \"ut sunt do\",\n      \"latitude\": -37358843.968296275,\n      \"longitude\": 14486252.573158786,\n      \"osmId\": -75295628.45866336\n    }\n  ],\n  \"author\": {\n    \"id\": 99579330.37630418,\n    \"username\": \"et laborum ad\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "Change collection description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson.name).to.eql(`asada`)",
									"    pm.expect(responseJson.description).to.eql(`hjsbdfjh asdhbfsb dj`)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"hjsbdfjh asdhbfsb dj\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserCollectionId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"commodo officia aliquip\",\n  \"type\": \"PUBLIC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 536868.3659441322,\n  \"name\": \"occaecat exercita\",\n  \"places\": [\n    {\n      \"id\": 38152948.55456507,\n      \"name\": \"in eiusmod sunt\",\n      \"latitude\": -67052106.38382106,\n      \"longitude\": -26170714.30845073,\n      \"osmId\": 59024866.93135142\n    },\n    {\n      \"id\": -61294810.204828165,\n      \"name\": \"ut sunt do\",\n      \"latitude\": -37358843.968296275,\n      \"longitude\": 14486252.573158786,\n      \"osmId\": -75295628.45866336\n    }\n  ],\n  \"author\": {\n    \"id\": 99579330.37630418,\n    \"username\": \"et laborum ad\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "Find collection via second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson.name).to.eql(`asada`)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{secondUserAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserCollectionId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 536868.3659441322,\n  \"name\": \"occaecat exercita\",\n  \"places\": [\n    {\n      \"id\": 38152948.55456507,\n      \"name\": \"in eiusmod sunt\",\n      \"latitude\": -67052106.38382106,\n      \"longitude\": -26170714.30845073,\n      \"osmId\": 59024866.93135142\n    },\n    {\n      \"id\": -61294810.204828165,\n      \"name\": \"ut sunt do\",\n      \"latitude\": -37358843.968296275,\n      \"longitude\": 14486252.573158786,\n      \"osmId\": -75295628.45866336\n    }\n  ],\n  \"author\": {\n    \"id\": 99579330.37630418,\n    \"username\": \"et laborum ad\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "Remove places 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 403",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{secondUserAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"placeOsmIds\": [\n    \n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:id/places",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id",
								"places"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserCollectionId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"placeIds\": [\n    -86929945.57618712,\n    62458587.290613115\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:id/remove-places",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id",
										"remove-places"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 536868.3659441322,\n  \"name\": \"occaecat exercita\",\n  \"places\": [\n    {\n      \"id\": 38152948.55456507,\n      \"name\": \"in eiusmod sunt\",\n      \"latitude\": -67052106.38382106,\n      \"longitude\": -26170714.30845073,\n      \"osmId\": 59024866.93135142\n    },\n    {\n      \"id\": -61294810.204828165,\n      \"name\": \"ut sunt do\",\n      \"latitude\": -37358843.968296275,\n      \"longitude\": 14486252.573158786,\n      \"osmId\": -75295628.45866336\n    }\n  ],\n  \"author\": {\n    \"id\": 99579330.37630418,\n    \"username\": \"et laborum ad\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "Remove places 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 401",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "wrong token lol",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"placeOsmIds\": [\n    \n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:id/places",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id",
								"places"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserCollectionId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"placeIds\": [\n    -86929945.57618712,\n    62458587.290613115\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:id/remove-places",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id",
										"remove-places"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 536868.3659441322,\n  \"name\": \"occaecat exercita\",\n  \"places\": [\n    {\n      \"id\": 38152948.55456507,\n      \"name\": \"in eiusmod sunt\",\n      \"latitude\": -67052106.38382106,\n      \"longitude\": -26170714.30845073,\n      \"osmId\": 59024866.93135142\n    },\n    {\n      \"id\": -61294810.204828165,\n      \"name\": \"ut sunt do\",\n      \"latitude\": -37358843.968296275,\n      \"longitude\": 14486252.573158786,\n      \"osmId\": -75295628.45866336\n    }\n  ],\n  \"author\": {\n    \"id\": 99579330.37630418,\n    \"username\": \"et laborum ad\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "Remove places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson.length).to.eql(0)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"placeOsmIds\": [\n    \n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:id/places",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id",
								"places"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserCollectionId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"placeIds\": [\n    -86929945.57618712,\n    62458587.290613115\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:id/remove-places",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id",
										"remove-places"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 536868.3659441322,\n  \"name\": \"occaecat exercita\",\n  \"places\": [\n    {\n      \"id\": 38152948.55456507,\n      \"name\": \"in eiusmod sunt\",\n      \"latitude\": -67052106.38382106,\n      \"longitude\": -26170714.30845073,\n      \"osmId\": 59024866.93135142\n    },\n    {\n      \"id\": -61294810.204828165,\n      \"name\": \"ut sunt do\",\n      \"latitude\": -37358843.968296275,\n      \"longitude\": 14486252.573158786,\n      \"osmId\": -75295628.45866336\n    }\n  ],\n  \"author\": {\n    \"id\": 99579330.37630418,\n    \"username\": \"et laborum ad\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "Find collection without places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    pm.expect(responseJson.length).to.eql(0)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/places?collectionId={{firstUserCollectionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"places"
							],
							"query": [
								{
									"key": "collectionId",
									"value": "{{firstUserCollectionId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 536868.3659441322,\n  \"name\": \"occaecat exercita\",\n  \"places\": [\n    {\n      \"id\": 38152948.55456507,\n      \"name\": \"in eiusmod sunt\",\n      \"latitude\": -67052106.38382106,\n      \"longitude\": -26170714.30845073,\n      \"osmId\": 59024866.93135142\n    },\n    {\n      \"id\": -61294810.204828165,\n      \"name\": \"ut sunt do\",\n      \"latitude\": -37358843.968296275,\n      \"longitude\": 14486252.573158786,\n      \"osmId\": -75295628.45866336\n    }\n  ],\n  \"author\": {\n    \"id\": 99579330.37630418,\n    \"username\": \"et laborum ad\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "Add places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    const place = responseJson[0]",
									"    pm.expect(place.name).to.eql(`elit`)",
									"    pm.expect(place.latitude).to.eql(55.755831)",
									"    pm.expect(place.longitude).to.eql(37.617673)",
									"    pm.expect(place.osmId).to.eql(21474836478)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"placeOsmIds\": [\n    21474836478\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:id/places",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id",
								"places"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserCollectionId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"placeIds\": [\n    -86929945.57618712,\n    62458587.290613115\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:id/add-places",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id",
										"add-places"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 536868.3659441322,\n  \"name\": \"occaecat exercita\",\n  \"places\": [\n    {\n      \"id\": 38152948.55456507,\n      \"name\": \"in eiusmod sunt\",\n      \"latitude\": -67052106.38382106,\n      \"longitude\": -26170714.30845073,\n      \"osmId\": 59024866.93135142\n    },\n    {\n      \"id\": -61294810.204828165,\n      \"name\": \"ut sunt do\",\n      \"latitude\": -37358843.968296275,\n      \"longitude\": 14486252.573158786,\n      \"osmId\": -75295628.45866336\n    }\n  ],\n  \"author\": {\n    \"id\": 99579330.37630418,\n    \"username\": \"et laborum ad\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				},
				{
					"name": "Find collection with places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"",
									"    const place = responseJson[0]",
									"    pm.expect(place.name).to.eql(`elit`)",
									"    pm.expect(place.latitude).to.eql(55.755831)",
									"    pm.expect(place.longitude).to.eql(37.617673)",
									"    pm.expect(place.osmId).to.eql(21474836478)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/places?collectionId={{firstUserCollectionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"places"
							],
							"query": [
								{
									"key": "collectionId",
									"value": "{{firstUserCollectionId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 536868.3659441322,\n  \"name\": \"occaecat exercita\",\n  \"places\": [\n    {\n      \"id\": 38152948.55456507,\n      \"name\": \"in eiusmod sunt\",\n      \"latitude\": -67052106.38382106,\n      \"longitude\": -26170714.30845073,\n      \"osmId\": 59024866.93135142\n    },\n    {\n      \"id\": -61294810.204828165,\n      \"name\": \"ut sunt do\",\n      \"latitude\": -37358843.968296275,\n      \"longitude\": 14486252.573158786,\n      \"osmId\": -75295628.45866336\n    }\n  ],\n  \"author\": {\n    \"id\": 99579330.37630418,\n    \"username\": \"et laborum ad\"\n  },\n  \"type\": \"PRIVATE\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Places with collections",
			"item": [
				{
					"name": "Find all places",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.length).to.eql(1)",
									"",
									"    const place = responseJson[0]",
									"    pm.expect(place.name).to.eql(`elit`)",
									"    pm.expect(place.latitude).to.eql(55.755831)",
									"    pm.expect(place.longitude).to.eql(37.617673)",
									"    pm.expect(place.osmId).to.eql(21474836478)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/places?userId={{firstUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"places"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{firstUserId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/places",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"places"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": -13558060.678136468,\n    \"name\": \"exercitation et\",\n    \"latitude\": -68988683.05092804,\n    \"longitude\": -28907044.189646497,\n    \"osmId\": -58722197.89098452\n  },\n  {\n    \"id\": 13633918.582254842,\n    \"name\": \"ut\",\n    \"latitude\": 77386310.69151562,\n    \"longitude\": 88991580.73299018,\n    \"osmId\": -65787863.18853562\n  }\n]"
						}
					]
				},
				{
					"name": "Find place collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.length).to.eql(1)",
									"",
									"    const collection = responseJson[0]",
									"",
									"    pm.expect(collection.name).to.eql(`asada`)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections?placeOsmId=21474836478",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections"
							],
							"query": [
								{
									"key": "placeOsmId",
									"value": "21474836478"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/places/:osmId/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"places",
										":osmId",
										"collections"
									],
									"variable": [
										{
											"key": "osmId",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 23689236.19166851,\n    \"name\": \"ex occaecat labore\",\n    \"places\": [\n      {\n        \"id\": -12225927.00577496,\n        \"name\": \"aliquip est\",\n        \"latitude\": 21315662.20110002,\n        \"longitude\": -5164765.589526609,\n        \"osmId\": 14494621.861543372\n      },\n      {\n        \"id\": -89564360.33660764,\n        \"name\": \"labore dolore\",\n        \"latitude\": -10273743.28915985,\n        \"longitude\": -74714266.85368083,\n        \"osmId\": -25682777.943703398\n      }\n    ],\n    \"author\": {\n      \"id\": 5298961.443420276,\n      \"username\": \"dolore Ut\"\n    },\n    \"type\": \"PUBLIC\"\n  },\n  {\n    \"id\": 47854977.0970003,\n    \"name\": \"laboris sed anim enim Lorem\",\n    \"places\": [\n      {\n        \"id\": -32610094.03794475,\n        \"name\": \"ut in\",\n        \"latitude\": -67327435.8794854,\n        \"longitude\": -53540578.3315225,\n        \"osmId\": 74977094.04109555\n      },\n      {\n        \"id\": 20411821.982416794,\n        \"name\": \"Ut dolore ullamco\",\n        \"latitude\": -51186368.80628102,\n        \"longitude\": -88694282.22650471,\n        \"osmId\": -8606202.458495378\n      }\n    ],\n    \"author\": {\n      \"id\": 19533988.810225144,\n      \"username\": \"dolore culpa laborum\"\n    },\n    \"type\": \"PUBLIC\"\n  }\n]"
						}
					]
				},
				{
					"name": "Empty place collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.length).to.eql(0)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"collectionIds\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/places/:osmId/collections",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"places",
								":osmId",
								"collections"
							],
							"variable": [
								{
									"key": "osmId",
									"value": "21474836478",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"collectionIds\": [\n    7078885.09517844,\n    75389792.10928497\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/places/:osmId/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"places",
										":osmId",
										"collections"
									],
									"variable": [
										{
											"key": "osmId",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 23689236.19166851,\n    \"name\": \"ex occaecat labore\",\n    \"places\": [\n      {\n        \"id\": -12225927.00577496,\n        \"name\": \"aliquip est\",\n        \"latitude\": 21315662.20110002,\n        \"longitude\": -5164765.589526609,\n        \"osmId\": 14494621.861543372\n      },\n      {\n        \"id\": -89564360.33660764,\n        \"name\": \"labore dolore\",\n        \"latitude\": -10273743.28915985,\n        \"longitude\": -74714266.85368083,\n        \"osmId\": -25682777.943703398\n      }\n    ],\n    \"author\": {\n      \"id\": 5298961.443420276,\n      \"username\": \"dolore Ut\"\n    },\n    \"type\": \"PUBLIC\"\n  },\n  {\n    \"id\": 47854977.0970003,\n    \"name\": \"laboris sed anim enim Lorem\",\n    \"places\": [\n      {\n        \"id\": -32610094.03794475,\n        \"name\": \"ut in\",\n        \"latitude\": -67327435.8794854,\n        \"longitude\": -53540578.3315225,\n        \"osmId\": 74977094.04109555\n      },\n      {\n        \"id\": 20411821.982416794,\n        \"name\": \"Ut dolore ullamco\",\n        \"latitude\": -51186368.80628102,\n        \"longitude\": -88694282.22650471,\n        \"osmId\": -8606202.458495378\n      }\n    ],\n    \"author\": {\n      \"id\": 19533988.810225144,\n      \"username\": \"dolore culpa laborum\"\n    },\n    \"type\": \"PUBLIC\"\n  }\n]"
						}
					]
				},
				{
					"name": "Find place collections (empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 200",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									"",
									"pm.test(`The response has all properties`, () => {",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.length).to.eql(0)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections?placeOsmId=21474836478",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections"
							],
							"query": [
								{
									"key": "placeOsmId",
									"value": "21474836478"
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/places/:osmId/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"places",
										":osmId",
										"collections"
									],
									"variable": [
										{
											"key": "osmId",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 23689236.19166851,\n    \"name\": \"ex occaecat labore\",\n    \"places\": [\n      {\n        \"id\": -12225927.00577496,\n        \"name\": \"aliquip est\",\n        \"latitude\": 21315662.20110002,\n        \"longitude\": -5164765.589526609,\n        \"osmId\": 14494621.861543372\n      },\n      {\n        \"id\": -89564360.33660764,\n        \"name\": \"labore dolore\",\n        \"latitude\": -10273743.28915985,\n        \"longitude\": -74714266.85368083,\n        \"osmId\": -25682777.943703398\n      }\n    ],\n    \"author\": {\n      \"id\": 5298961.443420276,\n      \"username\": \"dolore Ut\"\n    },\n    \"type\": \"PUBLIC\"\n  },\n  {\n    \"id\": 47854977.0970003,\n    \"name\": \"laboris sed anim enim Lorem\",\n    \"places\": [\n      {\n        \"id\": -32610094.03794475,\n        \"name\": \"ut in\",\n        \"latitude\": -67327435.8794854,\n        \"longitude\": -53540578.3315225,\n        \"osmId\": 74977094.04109555\n      },\n      {\n        \"id\": 20411821.982416794,\n        \"name\": \"Ut dolore ullamco\",\n        \"latitude\": -51186368.80628102,\n        \"longitude\": -88694282.22650471,\n        \"osmId\": -8606202.458495378\n      }\n    ],\n    \"author\": {\n      \"id\": 19533988.810225144,\n      \"username\": \"dolore culpa laborum\"\n    },\n    \"type\": \"PUBLIC\"\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "Delete collections",
			"item": [
				{
					"name": "Delete collection 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 403",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{secondUserAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserCollectionId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 204",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/collections/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{firstUserCollectionId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Delete users",
			"item": [
				{
					"name": "Delete second user with wrong token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 403",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "{{secondUserId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete first user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 204",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{firstUserAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "{{firstUserId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const statusCode = 204",
									"",
									"pm.test(`Status code is ${statusCode}`, () => {",
									"  pm.expect(pm.response.code).to.eql(statusCode)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{secondUserAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "{{secondUserId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "response",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "ea ut est consequat velit",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{firstUserAccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://nest:8000",
			"type": "string"
		},
		{
			"key": "firstUserAccessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "firstUserRefreshToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "firstUserUsername",
			"value": "testfirstusername",
			"type": "string"
		},
		{
			"key": "secondUserUsername",
			"value": "testsecondusername",
			"type": "string"
		},
		{
			"key": "secondUserAccessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "refreshToken",
			"value": ""
		},
		{
			"key": "secondUserRefreshToken",
			"value": ""
		},
		{
			"key": "firstUserAlternativeUsername",
			"value": "testfirstuseralternativename",
			"type": "string"
		},
		{
			"key": "firstUserCollectionId",
			"value": "0",
			"type": "string"
		},
		{
			"key": "firstUserId",
			"value": "0",
			"type": "string"
		},
		{
			"key": "secondUserId",
			"value": "0",
			"type": "string"
		}
	]
}